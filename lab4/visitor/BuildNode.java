//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import symbol.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class BuildNode implements GJNoArguVisitor<String> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    private HashMap<String, FlowGraph> flowGraphMap;
    private int currentNo;
    private HashMap<String, Integer> currentLabelMap;
    private FlowGraph currentFlowGraph;
    int curLineNum = 1; // record the line in a procedure; 0:entry

    public BuildNode(HashMap<String, FlowGraph> fg)
    {
        currentNo = 0;
        flowGraphMap = fg;
    }

    public String visit(NodeList n) {
        String _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n) {
        if ( n.present() ) {
            String _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public String visit(NodeOptional n) {
        if ( n.present() )
        {
            String labelName = n.node.accept(this);
            currentLabelMap.put(labelName, currentNo);
            return labelName;
        }
        else
            return null;
    }

    public String visit(NodeSequence n) {
        String _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public String visit(Goal n) {
        curLineNum = 1;
        FlowGraph flowGraph = new FlowGraph("MAIN");
        currentFlowGraph = flowGraph;
        String _ret=null;
        flowGraphMap.put("MAIN", flowGraph);
        currentLabelMap = flowGraph.mLabel;
        flowGraph.addBlock(0);
        currentNo++;
        n.f1.accept(this);
        flowGraph.addBlock(currentNo);
        flowGraph.No = currentNo;
        flowGraph.pBlock.lazyInit("MAIN", 0);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public String visit(StmtList n) {
        String _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public String visit(Procedure n) {
        // new Procedure, set curLineNum 1
        curLineNum = 1;
        String _ret = null;
        String pname = n.f0.accept(this);
        int pnum = Integer.parseInt(n.f2.accept(this));
        FlowGraph flowGraph = new FlowGraph(pname);
        flowGraph.pBlock.lazyInit(pname, pnum);
        currentFlowGraph = flowGraph;
        flowGraphMap.put(flowGraph.name, flowGraph);
        currentLabelMap = flowGraph.mLabel;
        currentNo = 0;
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     */
    public String visit(Stmt n) {
        String _ret=null;
        currentFlowGraph.addBlock(currentNo);
        n.f0.accept(this);
        curLineNum ++;
        currentNo++;
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public String visit(NoOpStmt n) {
        String _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public String visit(ErrorStmt n) {
        String _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    public String visit(CJumpStmt n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public String visit(JumpStmt n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    public String visit(HStoreStmt n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    public String visit(HLoadStmt n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public String visit(MoveStmt n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public String visit(PrintStmt n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Call()
     *       | HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public String visit(Exp n) {
        String _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    public String visit(StmtExp n) {
        String _ret=null;
        currentFlowGraph.addBlock(currentNo);   // entry
        currentNo++;
        n.f1.accept(this);
        currentFlowGraph.addBlock(currentNo);
        currentNo++;
        n.f3.accept(this);
        currentFlowGraph.addBlock(currentNo);   // exit
        currentFlowGraph.No = currentNo;
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    public String visit(Call n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        if (currentFlowGraph.pBlock.inCall < n.f3.size()) {
            currentFlowGraph.pBlock.inCall = n.f3.size();
        }
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public String visit(HAllocate n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Temp()
     * f2 -> SimpleExp()
     */
    public String visit(BinOp n) {
        String _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public String visit(Operator n) {
        String _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Temp()
     *       | IntegerLiteral()
     *       | Label()
     */
    public String visit(SimpleExp n) {
        String _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public String visit(Temp n) {
        String _ret=null;
        n.f0.accept(this);
        int tmpnum = Integer.parseInt(n.f1.accept(this));
        ProcedureBlock curPB = currentFlowGraph.pBlock;
        if (!curPB.tmpMap.containsKey(tmpnum)) {
            if (tmpnum < curPB.paranum) {
                // this TEMP is used as a parameter
                // so living from 0 to here (maybe)
                curPB.tmpMap.put(tmpnum, new Liveinterval(tmpnum, 1, curLineNum));
            } else {
                // think this TEMP is living at this line
                curPB.tmpMap.put(tmpnum, new Liveinterval(tmpnum, curLineNum, curLineNum));
            }
        }
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n) {
        String _ret=null;
        _ret = n.f0.toString();
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Label n) {
        String _ret=null;
        _ret = n.f0.toString();
        return _ret;
    }

}
